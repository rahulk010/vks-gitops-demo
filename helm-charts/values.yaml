# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Default values for onlineboutique.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

images:
  repository: harbor.sfo.rainpole.io/test-repo
  # Overrides the image tag whose default is the chart appVersion.
  tag: "5dceb55f42414abbc144170a9f41c51e149d51a7"
serviceAccounts:
  # Specifies whether service accounts should be created.
  create: true
  # Annotations to add to the service accounts.
  annotations: {}
  # Annotations to add only for the cartservice app. This allows to follow the least privilege principle where only cartservice needs to connect to external database for example via Workload Identity.
  annotationsOnlyForCartservice: false
networkPolicies:
  # Specifies if the NetworkPolicies are created or not. If true, one fine granular NetworkPolicy per app is created.
  create: false
sidecars:
  # Specifies if the Sidecars are created or not. If true, one fine granular Sidecar per app is created.
  create: false
authorizationPolicies:
  # Specifies if the AuthorizationPolicies are created or not. If true, one fine granular AuthorizationPolicy per app is created.
  create: false
opentelemetryCollector:
  create: false
  name: opentelemetrycollector
  # Specifies the project id for the otel collector. If set as "PROJECT_ID" (default value), an initContainer will automatically retrieve the project id value from the metadata server.
  projectId: "PROJECT_ID"
googleCloudOperations:
  profiler: false
  tracing: false
  metrics: false
seccompProfile:
  enable: false
  type: RuntimeDefault
securityContext:
  enable: true
adService:
  create: true
  name: adservice
cartService:
  create: true
  name: cartservice
checkoutService:
  create: true
  name: checkoutservice
  replicaCount: 1
currencyService:
  create: true
  name: currencyservice
emailService:
  create: true
  name: emailservice
  replicaCount: 2
frontend:
  create: true
  name: frontend
  externalService: false
  cymbalBranding: false
  # One of: local, gcp, aws, azure, onprem, alibaba. When not set, defaults to "local" unless running in GKE, otherwise auto-sets to gcp.
  platform: local
  singleSharedSession: false
  virtualService:
    create: false
    hosts:
      - "*"
    gateway:
      name: asm-ingressgateway
      namespace: asm-ingress
      labelKey: asm
      labelValue: ingressgateway
loadGenerator:
  create: false
  name: loadgenerator
  checkFrontendInitContainer: true
paymentService:
  create: true
  name: paymentservice
productCatalogService:
  create: true
  name: productcatalogservice
  # Specifies an extra latency to any request on productcatalogservice, by default no extra latency.
  extraLatency: ""
recommendationService:
  create: true
  name: recommendationservice
shippingService:
  create: true
  name: shippingservice
cartDatabase:
  # Specifies the type of the cartservice's database, could be either redis or spanner.
  type: redis
  connectionString: "redis-cart:6379"
  inClusterRedis:
    create: true
    name: redis-cart
    # Uses the public redis image from Docker Hub, otherwise will use the images.repository.
    publicRepository: false
  externalRedisTlsOrigination:
    enable: false
    name: exernal-redis-tls-origination
    endpointAddress: ""
    endpointPort: ""
    certificate: ""
# @TODO: This service is not currently available in Helm.
# https://github.com/GoogleCloudPlatform/microservices-demo/tree/main/kustomize/components/shopping-assistant
shoppingAssistantService:
  create: false
  name: shoppingassistantservice
